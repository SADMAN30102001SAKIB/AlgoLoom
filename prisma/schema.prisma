generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Achievement {
  id              String              @id @default(cuid())
  slug            String              @unique
  name            String
  description     String
  icon            String
  category        AchievementCategory
  requirement     String
  xpReward        Int                 @default(0)
  createdAt       DateTime            @default(now())
  UserAchievement UserAchievement[]
}

model DailyChallenge {
  id        String   @id @default(cuid())
  date      DateTime @unique @db.Date
  problemId String
  xpBonus   Int      @default(20)
  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@index([date(sort: Desc)])
  @@index([problemId])
}

model Friendship {
  id                             String           @id @default(cuid())
  userId                         String
  friendId                       String
  status                         FriendshipStatus @default(PENDING)
  createdAt                      DateTime         @default(now())
  User_Friendship_friendIdToUser User             @relation("Friendship_friendIdToUser", fields: [friendId], references: [id], onDelete: Cascade)
  User_Friendship_userIdToUser   User             @relation("Friendship_userIdToUser", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@index([friendId])
  @@index([userId])
}

model HintLog {
  id        String   @id @default(cuid())
  userId    String
  problemId String
  hintLevel Int
  prompt    String
  response  String
  cost      Float    @default(0)
  createdAt DateTime @default(now())
  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([userId, problemId])
  @@index([problemId])
}

model Leaderboard {
  id        String   @id @default(cuid())
  userId    String
  period    Period
  rank      Int
  score     Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, period, createdAt])
  @@index([period, score(sort: Desc)])
  @@index([userId])
}

model Problem {
  id              String        @id @default(cuid())
  slug            String        @unique
  title           String
  description     String
  difficulty      Difficulty
  constraints     String[]
  timeLimit       Int           @default(2000)
  memoryLimit     Int           @default(256000)
  tags            String[]
  companies       String[]
  isPremium       Boolean       @default(false)
  examples        Json
  hints           String[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  publishedAt     DateTime?
  inputFormat     String        @default("")
  outputFormat    String        @default("")
  dailyChallenges DailyChallenge[]
  hintLogs        HintLog[]
  problemStats    ProblemStat[]
  submissions     Submission[]
  testCases       TestCase[]

  @@index([difficulty])
  @@index([publishedAt])
}

model ProblemStat {
  id          String    @id @default(cuid())
  userId      String
  problemId   String
  attempts    Int       @default(0)
  solved      Boolean   @default(false)
  solvedAt    DateTime?
  hintsUsed   Boolean   @default(false)
  status      String?
  problem     Problem   @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
  @@index([problemId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Submission {
  id              String       @id @default(cuid())
  userId          String
  problemId       String
  code            String
  language        Language
  verdict         Verdict      @default(PENDING)
  runtime         Int?
  memory          Int?
  testCasesPassed Int          @default(0)
  totalTestCases  Int
  submittedAt     DateTime     @default(now())
  createdAt       DateTime     @default(now())
  problem         Problem      @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  testResults     TestResult[]

  @@index([submittedAt(sort: Desc)])
  @@index([userId, problemId])
  @@index([verdict])
}

model TestCase {
  id              String       @id @default(cuid())
  problemId       String
  input           String
  output          String
  explanation     String?
  isHidden        Boolean      @default(false)
  orderIndex      Int
  expectedOutputs String[]
  problem         Problem      @relation(fields: [problemId], references: [id], onDelete: Cascade)
  testResults     TestResult[]

  @@index([isHidden])
  @@index([problemId])
}

model TestResult {
  id             String     @id @default(cuid())
  submissionId   String
  testCaseId     String
  passed         Boolean
  output         String?
  expectedOutput String?
  runtime        Int?
  memory         Int?
  errorMessage   String?
  statusId       Int?
  submission     Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  testCase       TestCase   @relation(fields: [testCaseId], references: [id], onDelete: Cascade)

  @@index([submissionId])
  @@index([testCaseId])
}

model User {
  id                                   String            @id @default(cuid())
  username                             String            @unique
  email                                String            @unique
  emailVerified                        DateTime?
  password                             String?
  image                                String?
  role                                 Role              @default(USER)
  isPro                                Boolean           @default(false)
  bio                                  String?
  country                              String?
  university                           String?
  githubUrl                            String?
  linkedinUrl                          String?
  website                              String?
  xp                                   Int               @default(0)
  level                                Int               @default(1)
  createdAt                            DateTime          @default(now())
  updatedAt                            DateTime          @updatedAt
  location                             String?
  name                                 String?
  accounts                             Account[]
  Friendship_Friendship_friendIdToUser Friendship[]      @relation("Friendship_friendIdToUser")
  Friendship_Friendship_userIdToUser   Friendship[]      @relation("Friendship_userIdToUser")
  hintLogs                             HintLog[]
  leaderboardEntries                   Leaderboard[]
  problemStats                         ProblemStat[]
  sessions                             Session[]
  submissions                          Submission[]
  achievements                         UserAchievement[]

  @@index([email])
  @@index([username])
  @@index([xp(sort: Desc)])
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum AchievementCategory {
  MILESTONE
  MASTERY
  CONSISTENCY
  SPEED
  EXPLORATION
  SOCIAL
  PROBLEM_SOLVING
  STREAK
  LEVEL
  SPECIAL
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Language {
  PYTHON
  CPP
  JAVASCRIPT
  JAVA
  GO
  RUST
}

enum Period {
  ALL_TIME
  MONTHLY
  WEEKLY
}

enum Role {
  USER
  ADMIN
}

enum Verdict {
  PENDING
  ACCEPTED
  REJECTED
}
