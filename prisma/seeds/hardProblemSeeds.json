[
  {
    "slug": "median-of-two-sorted-arrays",
    "title": "Median of Two Sorted Arrays",
    "description": "Given two sorted arrays nums1 and nums2 of size m and n, return the median of the two sorted arrays.",
    "difficulty": "HARD",
    "constraints": [
      "nums1.length == m",
      "nums2.length == n",
      "0 <= m + n <= 2 * 10^6"
    ],
    "timeLimit": 2000,
    "memoryLimit": 256000,
    "tags": ["Binary Search", "Divide and Conquer", "Array"],
    "companies": ["Google"],
    "isPremium": true,
    "examples": [
      {
        "input": "2\n1 3\n1\n2",
        "output": "2.0"
      }
    ],
    "hints": [
      "Binary search on partition index",
      "Ensure left and right partitions sizes match"
    ],
    "inputFormat": "First line m, second line m ints, third line n, fourth line n ints",
    "outputFormat": "Median as number (use .0 for integer)",
    "testCases": [
      {
        "input": "2\n1 3\n1\n2",
        "output": "2.0",
        "isHidden": false,
        "orderIndex": 0
      },
      {
        "input": "2\n1 2\n2\n3 4",
        "output": "2.5",
        "isHidden": false,
        "orderIndex": 1
      },
      {
        "input": "0\n\n1\n1",
        "output": "1.0",
        "isHidden": false,
        "orderIndex": 2
      },
      {
        "input": "1\n0\n1\n0",
        "output": "0.0",
        "isHidden": true,
        "orderIndex": 3
      },
      {
        "input": "3\n1 3 8\n4\n2 7 9 10",
        "output": "6.0",
        "isHidden": true,
        "orderIndex": 4
      },
      {
        "input": "4\n1 2 3 4\n4\n5 6 7 8",
        "output": "4.5",
        "isHidden": true,
        "orderIndex": 5
      },
      {
        "input": "1\n100000\n0\n",
        "output": "100000.0",
        "isHidden": true,
        "orderIndex": 6
      },
      {
        "input": "2\n1 1\n2\n1 1",
        "output": "1.0",
        "isHidden": true,
        "orderIndex": 7
      },
      {
        "input": "3\n-5 -3 0\n2\n1 2",
        "output": "-0.5",
        "isHidden": true,
        "orderIndex": 8
      },
      {
        "input": "5\n1 2 3 4 5\n0\n",
        "output": "3.0",
        "isHidden": true,
        "orderIndex": 9
      }
    ]
  },
  {
    "slug": "regular-expression-matching",
    "title": "Regular Expression Matching",
    "description": "Implement regular expression matching with support for '.' and '*'.",
    "difficulty": "HARD",
    "constraints": ["1 <= s.length <= 20", "1 <= p.length <= 30"],
    "timeLimit": 2000,
    "memoryLimit": 256000,
    "tags": ["Dynamic Programming", "Recursion"],
    "companies": ["Google"],
    "examples": [
      {
        "input": "aa\na",
        "output": "false"
      },
      {
        "input": "aa\na*",
        "output": "true"
      }
    ],
    "hints": [
      "Use DP where dp[i][j] indicates match of s[i:] and p[j:]",
      "Handle '*' as zero or more of previous char"
    ],
    "inputFormat": "Two lines: s then p",
    "outputFormat": "true or false",
    "testCases": [
      {
        "input": "aa\na",
        "output": "false",
        "isHidden": false,
        "orderIndex": 0
      },
      {
        "input": "aa\na*",
        "output": "true",
        "isHidden": false,
        "orderIndex": 1
      },
      {
        "input": "ab\n.*",
        "output": "true",
        "isHidden": false,
        "orderIndex": 2
      },
      {
        "input": "aab\nc*a*b",
        "output": "true",
        "isHidden": true,
        "orderIndex": 3
      },
      {
        "input": "mississippi\nmis*is*p*.",
        "output": "false",
        "isHidden": true,
        "orderIndex": 4
      },
      {
        "input": "ab\n.*c",
        "output": "false",
        "isHidden": true,
        "orderIndex": 5
      },
      {
        "input": "aaa\na*a",
        "output": "true",
        "isHidden": true,
        "orderIndex": 6
      },
      {
        "input": "bbb\nb*b",
        "output": "true",
        "isHidden": true,
        "orderIndex": 7
      },
      {
        "input": "\n.*",
        "output": "true",
        "isHidden": true,
        "orderIndex": 8
      },
      {
        "input": "abcd\n.*d",
        "output": "true",
        "isHidden": true,
        "orderIndex": 9
      }
    ]
  },
  {
    "slug": "first-missing-positive",
    "title": "First Missing Positive",
    "description": "Given an unsorted integer array, find the smallest missing positive integer in O(n) time and O(1) extra space.",
    "difficulty": "HARD",
    "constraints": ["1 <= nums.length <= 5 * 10^5"],
    "timeLimit": 2000,
    "memoryLimit": 256000,
    "tags": ["Array", "Indexing"],
    "companies": ["Google"],
    "examples": [
      {
        "input": "3\n1 2 0",
        "output": "3"
      }
    ],
    "hints": [
      "Place each number n at index n-1 if possible",
      "Then scan for first index i where nums[i] != i+1"
    ],
    "inputFormat": "First line n, second line n integers",
    "outputFormat": "An integer",
    "testCases": [
      {
        "input": "3\n1 2 0",
        "output": "3",
        "isHidden": false,
        "orderIndex": 0
      },
      {
        "input": "2\n3 4",
        "output": "1",
        "isHidden": false,
        "orderIndex": 1
      },
      {
        "input": "5\n1 2 3 4 5",
        "output": "6",
        "isHidden": false,
        "orderIndex": 2
      },
      {
        "input": "4\n3 4 -1 1",
        "output": "2",
        "isHidden": true,
        "orderIndex": 3
      },
      {
        "input": "1\n1",
        "output": "2",
        "isHidden": true,
        "orderIndex": 4
      },
      {
        "input": "6\n7 8 9 11 12 13",
        "output": "1",
        "isHidden": true,
        "orderIndex": 5
      },
      {
        "input": "6\n2 3 4 5 6 7",
        "output": "1",
        "isHidden": true,
        "orderIndex": 6
      },
      {
        "input": "3\n2 1 4",
        "output": "3",
        "isHidden": true,
        "orderIndex": 7
      },
      {
        "input": "5\n0 -1 -2 -3 -4",
        "output": "1",
        "isHidden": true,
        "orderIndex": 8
      },
      {
        "input": "5\n2 3 7 6 8",
        "output": "1",
        "isHidden": true,
        "orderIndex": 9
      }
    ]
  },
  {
    "slug": "trapping-rain-water",
    "title": "Trapping Rain Water",
    "description": "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.",
    "difficulty": "HARD",
    "constraints": ["0 <= n <= 10^5"],
    "timeLimit": 2000,
    "memoryLimit": 256000,
    "tags": ["Two Pointers", "Stack"],
    "companies": ["Google"],
    "isPremium": true,
    "examples": [
      {
        "input": "12\n0 1 0 2 1 0 1 3 2 1 2 1",
        "output": "6"
      }
    ],
    "hints": [
      "Use two pointers and keep track of leftMax/rightMax",
      "Alternatively use a stack to accumulate boundaries"
    ],
    "inputFormat": "First line n, second line n integers heights",
    "outputFormat": "Total trapped water as integer",
    "testCases": [
      {
        "input": "12\n0 1 0 2 1 0 1 3 2 1 2 1",
        "output": "6",
        "isHidden": false,
        "orderIndex": 0
      },
      {
        "input": "3\n2 0 2",
        "output": "2",
        "isHidden": false,
        "orderIndex": 1
      },
      {
        "input": "1\n0",
        "output": "0",
        "isHidden": false,
        "orderIndex": 2
      },
      {
        "input": "6\n5 4 1 2 3 2",
        "output": "5",
        "isHidden": true,
        "orderIndex": 3
      },
      {
        "input": "5\n4 2 0 3 2",
        "output": "6",
        "isHidden": true,
        "orderIndex": 4
      },
      {
        "input": "4\n3 0 0 2",
        "output": "4",
        "isHidden": true,
        "orderIndex": 5
      },
      {
        "input": "7\n0 2 0 2 1 3 1",
        "output": "5",
        "isHidden": true,
        "orderIndex": 6
      },
      {
        "input": "5\n2 0 2 0 2",
        "output": "4",
        "isHidden": true,
        "orderIndex": 7
      },
      {
        "input": "8\n5 2 3 2 4 1 2 3",
        "output": "6",
        "isHidden": true,
        "orderIndex": 8
      },
      {
        "input": "9\n0 1 0 1 0 1 0 1 0",
        "output": "4",
        "isHidden": true,
        "orderIndex": 9
      }
    ]
  },
  {
    "slug": "n-queens",
    "title": "N-Queens",
    "description": "Place n queens on an n x n chessboard such that no two queens attack each other. Return all distinct solutions as board representations.",
    "difficulty": "HARD",
    "constraints": ["1 <= n <= 9"],
    "timeLimit": 2000,
    "memoryLimit": 256000,
    "tags": ["Backtracking"],
    "companies": ["Facebook"],
    "isPremium": true,
    "examples": [
      {
        "input": "4",
        "output": "[[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]"
      }
    ],
    "hints": [
      "Use backtracking with columns and diagonal sets",
      "Prune early when conflicts detected"
    ],
    "inputFormat": "Single integer n",
    "outputFormat": "List of solutions; each solution is n strings of length n with Q and .",
    "testCases": [
      {
        "input": "4",
        "output": "2 solutions",
        "isHidden": false,
        "orderIndex": 0
      },
      {
        "input": "1",
        "output": "1 solution",
        "isHidden": false,
        "orderIndex": 1
      },
      {
        "input": "2",
        "output": "0 solutions",
        "isHidden": false,
        "orderIndex": 2
      },
      {
        "input": "3",
        "output": "0 solutions",
        "isHidden": true,
        "orderIndex": 3
      },
      {
        "input": "5",
        "output": "10 solutions",
        "isHidden": true,
        "orderIndex": 4
      },
      {
        "input": "6",
        "output": "4 solutions",
        "isHidden": true,
        "orderIndex": 5
      },
      {
        "input": "7",
        "output": "40 solutions (count)",
        "isHidden": true,
        "orderIndex": 6
      },
      {
        "input": "8",
        "output": "92 solutions (count)",
        "isHidden": true,
        "orderIndex": 7
      },
      {
        "input": "9",
        "output": "352 solutions (count)",
        "isHidden": true,
        "orderIndex": 8
      },
      {
        "input": "10",
        "output": "724 solutions (count)",
        "isHidden": true,
        "orderIndex": 9
      }
    ]
  }
]
